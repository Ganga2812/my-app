{"version":3,"sources":["Encrypt.js","App.js","reportWebVitals.js","index.js"],"names":["Encrypt","props","state","ciphertext","ciphertext2","ciphertext3","plainText","key","privateKey","publicKey","encryptString","bind","decryptString","e","t0","performance","now","plaintext","this","refs","abc","value","ads","CryptoJS","AES","encrypt","setState","editCiphertext","innerHTML","editKey","time","editTime","toFixed","decrypt","toString","enc","Utf8","editPlaintext","type","ref","onClick","event","contentEditable","encryptRSAString","decryptRSAString","crypt","Crypt","rrr","JSON","parse","editCiphertext2","cipher","editTime2","editPlaintext2","message","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0956dc6.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./App.css\";\r\nimport CryptoJS from 'crypto-js';\r\nimport { findAllByDisplayValue } from '@testing-library/dom';\r\nimport {Crypt,RSA} from 'hybrid-crypto-js';\r\n\r\nexport class Encrypt extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ciphertext: 'test',\r\n            ciphertext2: '',\r\n            ciphertext3: {\"v\":\"hybrid-crypto-js_0.1.0\"},\r\n            plainText:'',\r\n            key:'',\r\n            privateKey: '-----BEGIN RSA PRIVATE KEY-----\\n' +\r\n            'MIICWgIBAAKBgE9rwjDXUD08KXTVJvpSj4ZzXAhBV+UBowqYFET3565GaP3t4Mxa\\n' +\r\n            'KRGkZPtfbG7a5QdfAqlxE7u/FDVxOddpzVettvh6NGzZ8/llxfXZ+ycwA3lAfxga\\n' +\r\n            'H/phstT+iaBwqYiDpeu2w55Lm7zWtICioGnZ38ovfquApMIpo/V1qvELAgMBAAEC\\n' +\r\n            'gYBOJRU5wWGuHtgboO9tNncKL8/KP6EgL3AhKGopQlOv4o/D6p9Z8wyd00eZHtcu\\n' +\r\n            'bCsWCaIw3pYwEV7tBq+HCQ+FsRsE4rmMT76bSLA2OgGo9GXPaeML3zK2ANCAPK4p\\n' +\r\n            '3/rPzkc7Bg/g5lLt8eT4kcE9UMVe9ZzEFuCZISnajSGJwQJBAJPQHiY5j71roCKM\\n' +\r\n            'bXtsCdUDzzfOAR8IpH1QqgAFv2rxwZZywA9QowJ++0hg52He2EBxXjD6V3XVQTlJ\\n' +\r\n            'ca1ZF3kCQQCJjPLjKM7gv8HuDAJhvEgAL7exHsPrhMJakVO8w0b+nejXeuEHfsTC\\n' +\r\n            '2S+dyDHtbVRbwkzz+UbtRW2G0dp5ljejAkBLZyd6KHMDFhwig7B1/a8mU0MqHJTF\\n' +\r\n            '2ArRQoz2Zfg3/gvbS75eEayWYWCek5B1hNCcTzjVk196ZMdZCfZLj99BAkB5Ep3A\\n' +\r\n            'oWznmyJCPEPkb2wY7eeMef4N0r+YJI9GecSF3czTzo9An67lq3IkOdDoofE9C1vc\\n' +\r\n            '7DAoLZJot1LM7xJtAkBE2Y2JkFTGmTYyYpOQX9ZvQJCoockPE65VBHhdUEaV/zkH\\n' +\r\n            'bA7xt7GljyipL1FxfFEQ85CJrK0cNl1ARRuNp6FJ\\n' +\r\n            '-----END RSA PRIVATE KEY-----',\r\n            publicKey: '-----BEGIN PUBLIC KEY-----\\n' +\r\n            'MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgE9rwjDXUD08KXTVJvpSj4ZzXAhB\\n' +\r\n            'V+UBowqYFET3565GaP3t4MxaKRGkZPtfbG7a5QdfAqlxE7u/FDVxOddpzVettvh6\\n' +\r\n            'NGzZ8/llxfXZ+ycwA3lAfxgaH/phstT+iaBwqYiDpeu2w55Lm7zWtICioGnZ38ov\\n' +\r\n            'fquApMIpo/V1qvELAgMBAAE=\\n' +\r\n            '-----END PUBLIC KEY-----'\r\n        };\r\n        \r\n        this.encryptString = this.encryptString.bind(this);\r\n        this.decryptString = this.decryptString.bind(this);\r\n    }\r\n\r\n    encryptString(e) {\r\n        var t0 = performance.now();\r\n        var plaintext = this.refs.abc.value;\r\n        var key = this.refs.ads.value;\r\n        this.state.ciphertext = CryptoJS.AES.encrypt(plaintext, key);\r\n        \r\n        this.setState = {\r\n            ciphertext: CryptoJS.AES.encrypt(plaintext, key)\r\n        }\r\n        this.refs.editCiphertext.innerHTML = this.state.ciphertext;\r\n        this.refs.editKey.innerHTML = key;\r\n        var t1 = performance.now();\r\n        var time = t1 - t0;\r\n        this.refs.editTime.innerHTML = time.toFixed(3) + ' milliseconds to compute';\r\n    }\r\n\r\n    decryptString(e) {\r\n        var t0 = performance.now();\r\n        var ciphertext = this.state.ciphertext;\r\n        var key = this.refs.ads.value;\r\n        let plaintext = CryptoJS.AES.decrypt(ciphertext, key).toString(CryptoJS.enc.Utf8);\r\n        this.refs.editPlaintext.innerHTML = plaintext;\r\n        var t1 = performance.now();\r\n        var time = t1 - t0;\r\n        this.refs.editTime.innerHTML = time.toFixed(3) + ' milliseconds to compute';\r\n    }\r\n\r\n    render() {\r\n\r\n    return(\r\n        <div>\r\n        <h2>AES Encrpytion</h2>  \r\n        \r\n        <div>\r\n            <label>String: </label>\r\n            <input type = \"text\" ref = \"abc\"></input>\r\n        </div>\r\n        <div>\r\n            <label>Key: </label>\r\n            <input type = \"text\" ref = \"ads\"></input>\r\n        </div>\r\n            <div>\r\n                <button onClick = {(event) => this.encryptString(event)}>Encrypt</button>\r\n                <button onClick = {() => this.decryptString()}>Decrypt</button>\r\n            </div>\r\n       <div>\r\n           <label contentEditable='true' ref = 'plaintext' >Plaintext: </label> \r\n           <label contentEditable='true' ref='editPlaintext'></label>\r\n       </div>\r\n       <div>\r\n           <label contentEditable='true' ref = 'ciphertext'>Ciphertext: </label> \r\n           <label type = 'text' contentEditable='true' ref='editCiphertext' value={this.state.ciphertext}>{this.state.ciphertext}</label>\r\n       </div>\r\n       <div>\r\n           <label contentEditable='true' ref = 'Key'>Key Used: </label> \r\n           <label contentEditable='true' ref='editKey'></label>\r\n       </div>\r\n       <div>\r\n           <label contentEditable='true' ref = 'Time'>Time Taken: </label> \r\n           <label contentEditable='true' ref='editTime'></label>\r\n       </div>\r\n       <h2>RSA Encrpytion</h2>  \r\n        <div>\r\n            <label>String: </label>\r\n            <input type = \"text\" ref = \"rrr\"></input>\r\n        </div>\r\n        <div>\r\n            <button onClick = {(event) => this.encryptRSAString(event)}>Encrypt</button>\r\n            <button onClick = {() => this.decryptRSAString()}>Decrypt</button>\r\n        </div>\r\n       \r\n       <div>\r\n           <label contentEditable='true' ref = 'plaintext2'>Plaintext: </label> \r\n           <label contentEditable='true' ref='editPlaintext2' ></label>\r\n       </div>\r\n       <div>\r\n           <label contentEditable='true' ref = 'ciphertext2'>Ciphertext: </label> \r\n           <label contentEditable='true' ref='editCiphertext2'></label>\r\n       </div>\r\n       <div>\r\n           <label contentEditable='true' ref = 'Time2'>Time Taken: </label> \r\n           <label contentEditable='true' ref='editTime2'></label>\r\n       </div>\r\n       </div>\r\n    );\r\n    };\r\n    \r\n   \r\n\r\n   \r\n\r\n    encryptRSAString(e) {\r\n        var t0 = performance.now();  \r\n        var crypt = new Crypt();\r\n        var plaintext = this.refs.rrr.value;\r\n        var array = [];\r\n        this.state.ciphertext3 = crypt.encrypt(this.state.publicKey, plaintext);;\r\n        var ciphertext = JSON.parse(this.state.ciphertext3);\r\n        this.refs.editCiphertext2.innerHTML = ciphertext.cipher;\r\n        this.state.ciphertext2 = ciphertext.cipher;\r\n        var t1 = performance.now();\r\n        var time = t1 - t0;\r\n        this.refs.editTime2.innerHTML = time.toFixed(3) + ' milliseconds to compute';\r\n        return false;\r\n    }\r\n\r\n    decryptRSAString(e) {\r\n        var t0 = performance.now();\r\n        var crypt = new Crypt();\r\n        var ciphertext = this.state.ciphertext3;\r\n        var plaintext = crypt.decrypt(this.state.privateKey, ciphertext);\r\n        this.refs.editPlaintext2.innerHTML = plaintext.message;\r\n        var t1 = performance.now();\r\n        var time = t1 - t0;\r\n        this.refs.editTime2.innerHTML = time.toFixed(3) + ' milliseconds to compute';\r\n        return false;\r\n\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default Encrypt; ","import './App.css';\nimport Encrypt from './Encrypt';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Encrypt />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}